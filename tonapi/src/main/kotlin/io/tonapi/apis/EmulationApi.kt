/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.tonapi.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import io.tonapi.models.AccountEvent
import io.tonapi.models.EmulateMessageToEventRequest
import io.tonapi.models.Event
import io.tonapi.models.GetBlockchainBlockDefaultResponse
import io.tonapi.models.MessageConsequences
import io.tonapi.models.Trace

import com.squareup.moshi.Json

import io.tonapi.infrastructure.ApiClient
import io.tonapi.infrastructure.ApiResponse
import io.tonapi.infrastructure.ClientException
import io.tonapi.infrastructure.ClientError
import io.tonapi.infrastructure.ServerException
import io.tonapi.infrastructure.ServerError
import io.tonapi.infrastructure.MultiValueMap
import io.tonapi.infrastructure.PartConfig
import io.tonapi.infrastructure.RequestConfig
import io.tonapi.infrastructure.RequestMethod
import io.tonapi.infrastructure.ResponseType
import io.tonapi.infrastructure.Success
import io.tonapi.infrastructure.toMultiValue

class EmulationApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://tonapi.io")
        }
    }

    /**
     * 
     * Emulate sending message to blockchain
     * @param accountId account ID
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @param acceptLanguage  (optional, default to "en")
     * @return AccountEvent
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun emulateMessageToAccountEvent(accountId: kotlin.String, emulateMessageToEventRequest: EmulateMessageToEventRequest, acceptLanguage: kotlin.String? = "en") : AccountEvent {
        val localVarResponse = emulateMessageToAccountEventWithHttpInfo(accountId = accountId, emulateMessageToEventRequest = emulateMessageToEventRequest, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AccountEvent
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Emulate sending message to blockchain
     * @param accountId account ID
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @param acceptLanguage  (optional, default to "en")
     * @return ApiResponse<AccountEvent?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun emulateMessageToAccountEventWithHttpInfo(accountId: kotlin.String, emulateMessageToEventRequest: EmulateMessageToEventRequest, acceptLanguage: kotlin.String?) : ApiResponse<AccountEvent?> {
        val localVariableConfig = emulateMessageToAccountEventRequestConfig(accountId = accountId, emulateMessageToEventRequest = emulateMessageToEventRequest, acceptLanguage = acceptLanguage)

        return request<EmulateMessageToEventRequest, AccountEvent>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation emulateMessageToAccountEvent
     *
     * @param accountId account ID
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @param acceptLanguage  (optional, default to "en")
     * @return RequestConfig
     */
    fun emulateMessageToAccountEventRequestConfig(accountId: kotlin.String, emulateMessageToEventRequest: EmulateMessageToEventRequest, acceptLanguage: kotlin.String?) : RequestConfig<EmulateMessageToEventRequest> {
        val localVariableBody = emulateMessageToEventRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/accounts/{account_id}/events/emulate".replace("{"+"account_id"+"}", encodeURIComponent(accountId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Emulate sending message to blockchain
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @param acceptLanguage  (optional, default to "en")
     * @return Event
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun emulateMessageToEvent(emulateMessageToEventRequest: EmulateMessageToEventRequest, acceptLanguage: kotlin.String? = "en") : Event {
        val localVarResponse = emulateMessageToEventWithHttpInfo(emulateMessageToEventRequest = emulateMessageToEventRequest, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Event
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Emulate sending message to blockchain
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @param acceptLanguage  (optional, default to "en")
     * @return ApiResponse<Event?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun emulateMessageToEventWithHttpInfo(emulateMessageToEventRequest: EmulateMessageToEventRequest, acceptLanguage: kotlin.String?) : ApiResponse<Event?> {
        val localVariableConfig = emulateMessageToEventRequestConfig(emulateMessageToEventRequest = emulateMessageToEventRequest, acceptLanguage = acceptLanguage)

        return request<EmulateMessageToEventRequest, Event>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation emulateMessageToEvent
     *
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @param acceptLanguage  (optional, default to "en")
     * @return RequestConfig
     */
    fun emulateMessageToEventRequestConfig(emulateMessageToEventRequest: EmulateMessageToEventRequest, acceptLanguage: kotlin.String?) : RequestConfig<EmulateMessageToEventRequest> {
        val localVariableBody = emulateMessageToEventRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/events/emulate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Emulate sending message to blockchain
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @return Trace
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun emulateMessageToTrace(emulateMessageToEventRequest: EmulateMessageToEventRequest) : Trace {
        val localVarResponse = emulateMessageToTraceWithHttpInfo(emulateMessageToEventRequest = emulateMessageToEventRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Trace
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Emulate sending message to blockchain
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @return ApiResponse<Trace?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun emulateMessageToTraceWithHttpInfo(emulateMessageToEventRequest: EmulateMessageToEventRequest) : ApiResponse<Trace?> {
        val localVariableConfig = emulateMessageToTraceRequestConfig(emulateMessageToEventRequest = emulateMessageToEventRequest)

        return request<EmulateMessageToEventRequest, Trace>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation emulateMessageToTrace
     *
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @return RequestConfig
     */
    fun emulateMessageToTraceRequestConfig(emulateMessageToEventRequest: EmulateMessageToEventRequest) : RequestConfig<EmulateMessageToEventRequest> {
        val localVariableBody = emulateMessageToEventRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/traces/emulate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * Emulate sending message to blockchain
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @param acceptLanguage  (optional, default to "en")
     * @return MessageConsequences
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun emulateMessageToWallet(emulateMessageToEventRequest: EmulateMessageToEventRequest, acceptLanguage: kotlin.String? = "en") : MessageConsequences {
        val localVarResponse = emulateMessageToWalletWithHttpInfo(emulateMessageToEventRequest = emulateMessageToEventRequest, acceptLanguage = acceptLanguage)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MessageConsequences
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Emulate sending message to blockchain
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @param acceptLanguage  (optional, default to "en")
     * @return ApiResponse<MessageConsequences?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun emulateMessageToWalletWithHttpInfo(emulateMessageToEventRequest: EmulateMessageToEventRequest, acceptLanguage: kotlin.String?) : ApiResponse<MessageConsequences?> {
        val localVariableConfig = emulateMessageToWalletRequestConfig(emulateMessageToEventRequest = emulateMessageToEventRequest, acceptLanguage = acceptLanguage)

        return request<EmulateMessageToEventRequest, MessageConsequences>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation emulateMessageToWallet
     *
     * @param emulateMessageToEventRequest bag-of-cells serialized to base64
     * @param acceptLanguage  (optional, default to "en")
     * @return RequestConfig
     */
    fun emulateMessageToWalletRequestConfig(emulateMessageToEventRequest: EmulateMessageToEventRequest, acceptLanguage: kotlin.String?) : RequestConfig<EmulateMessageToEventRequest> {
        val localVariableBody = emulateMessageToEventRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        acceptLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v2/wallet/emulate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
